#!/bin/bash

# Pre-commit hook for LeetCode project
# This hook ensures code quality by running tests, formatting, and linting before allowing commits

set -e  # Exit on any error

# Color definitions for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[PRE-COMMIT]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[PRE-COMMIT]${NC} ✓ $1"
}

print_warning() {
    echo -e "${YELLOW}[PRE-COMMIT]${NC} ⚠ $1"
}

print_error() {
    echo -e "${RED}[PRE-COMMIT]${NC} ✗ $1"
}

# Get the root directory of the git repository
REPO_ROOT=$(git rev-parse --show-toplevel)
cd "$REPO_ROOT"

# Check if virtual environment exists and activate it
if [ -f "venv/bin/activate" ]; then
    print_status "Activating virtual environment..."
    source venv/bin/activate
elif [ -f ".venv/bin/activate" ]; then
    print_status "Activating virtual environment..."
    source .venv/bin/activate
fi

print_status "Starting pre-commit checks..."

# Check if we have any staged files to commit
if ! git diff --cached --quiet; then
    print_status "Files staged for commit detected"
else
    print_warning "No files staged for commit"
    exit 0
fi

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only)
print_status "Staged files: $(echo "$STAGED_FILES" | tr '\n' ' ')"

# Check what types of files are changed
HAS_PYTHON_FILES=false
HAS_CPP_FILES=false
HAS_PROBLEM_FILES=false
HAS_CODE_FILES=false

while IFS= read -r file; do
    case "$file" in
        *.py)
            HAS_PYTHON_FILES=true
            HAS_CODE_FILES=true
            if [[ "$file" == problems/* ]]; then
                HAS_PROBLEM_FILES=true
            fi
            ;;
        *.cc|*.h)
            HAS_CPP_FILES=true
            HAS_CODE_FILES=true
            if [[ "$file" == problems/* ]]; then
                HAS_PROBLEM_FILES=true
            fi
            ;;
        problems/*)
            HAS_PROBLEM_FILES=true
            ;;
    esac
done <<< "$STAGED_FILES"

print_status "Change analysis: Python=${HAS_PYTHON_FILES}, C++=${HAS_CPP_FILES}, Problems=${HAS_PROBLEM_FILES}, Code=${HAS_CODE_FILES}"

CURRENT_STEP=1
TOTAL_STEPS=2

# Step 1: Update badges and check README
print_status "Step ${CURRENT_STEP}/${TOTAL_STEPS}: Updating badges and checking README.md..."

# If problem files changed, automatically update badges
if [ "$HAS_PROBLEM_FILES" = true ]; then
    print_status "Problem files detected, updating badges..."
    if make update-badges; then
        print_success "Badges updated successfully"
        
        # Check if badge update modified README.md
        if ! git diff --quiet README.md 2>/dev/null; then
            print_status "README.md was updated with new badges, staging changes..."
            git add README.md
        fi
    else
        print_error "Badge update failed"
        exit 1
    fi
fi

# Now check if README is up to date
if make readme-check; then
    print_success "README.md is up to date"
else
    print_error "README.md is outdated or generation failed"
    print_error "Please run 'make readme' to update README.md"
    exit 1
fi
CURRENT_STEP=$((CURRENT_STEP + 1))

# Step 2: Format code (only if code files are changed)
if [ "$HAS_CODE_FILES" = true ]; then
    print_status "Step ${CURRENT_STEP}/${TOTAL_STEPS}: Formatting code..."
    if make format > /dev/null 2>&1; then
        print_success "Code formatting completed"
        
        # Check if formatting made any changes
        if ! git diff --quiet; then
            print_warning "Formatting made changes to your files"
            print_status "Adding formatted files to staging area..."
            
            # Add only the files that were originally staged and got formatted
            git diff --name-only | while read -r file; do
                if git diff --cached --name-only | grep -q "^$file$"; then
                    git add "$file"
                    print_status "Re-staged formatted file: $file"
                fi
            done
        fi
    else
        print_error "Code formatting failed"
        print_error "Please fix formatting issues and try again"
        exit 1
    fi
    CURRENT_STEP=$((CURRENT_STEP + 1))
    TOTAL_STEPS=$((TOTAL_STEPS + 1))
else
    print_status "Skipping code formatting (no code files changed)"
fi

# Step 3: Run tests (only if problem files are changed)
if [ "$HAS_PROBLEM_FILES" = true ]; then
    print_status "Step ${CURRENT_STEP}/${TOTAL_STEPS}: Running tests for changed problems..."
    print_status "DEBUG: Current directory: $(pwd)"
    print_status "DEBUG: Python path: $(which python3)"
    print_status "DEBUG: Pytest path: $(which pytest)"
    print_status "DEBUG: PATH: $PATH"
    if make test:all; then
        print_success "All tests passed"
    else
        print_error "Tests failed"
        print_error "Please fix failing tests and try again"
        print_status "Run 'make test:all' to see detailed test results"
        print_status "DEBUG: Last command exit code: $?"
        exit 1
    fi
    CURRENT_STEP=$((CURRENT_STEP + 1))
    TOTAL_STEPS=$((TOTAL_STEPS + 1))
else
    print_status "Skipping tests (no problem files changed)"
fi

# Step 4: Lint code (only if Python or C++ files are changed)
if [ "$HAS_PYTHON_FILES" = true ] || [ "$HAS_CPP_FILES" = true ]; then
    print_status "Step ${CURRENT_STEP}/${TOTAL_STEPS}: Linting code..."
    
    # Run specific linting based on file types
    LINT_SUCCESS=true
    if [ "$HAS_PYTHON_FILES" = true ]; then
        print_status "Linting Python files..."
        if ! make lint-python; then
            LINT_SUCCESS=false
        fi
    fi
    
    if [ "$HAS_CPP_FILES" = true ]; then
        print_status "Linting C++ files..."
        if ! make lint-cpp; then
            LINT_SUCCESS=false
        fi
    fi
    
    if [ "$LINT_SUCCESS" = true ]; then
        print_success "Code linting passed"
    else
        print_error "Code linting failed"
        print_error "Please fix linting issues and try again"
        print_status "Run 'make lint' to see detailed linting errors"
        exit 1
    fi
else
    print_status "Skipping linting (no Python or C++ files changed)"
fi

# All checks passed
print_success "All pre-commit checks passed! ✨"
print_status "Proceeding with commit..."

exit 0
